// Part of <https://miracle.systems/p/walkner-maxos> licensed under <CC BY-NC-SA 4.0>

define(["underscore","jquery","../broker","../pubsub","../user","../tags/TagCollection","./MaxosTest"],function(e,t,n,a,o,s,i){"use strict";function r(){if(!c.loading){var n=t.ajax({url:e.result(c.tags,"url")}).done(function(e){l(e.collection)}),a=c.test.fetch();return c.loading=t.when(n,a),c.loading.done(function(){c.loaded=!0}),c.loading.always(function(){c.loading=null}),c.loading}}function l(t){var a={},o={silent:!0};0===c.tags.length||Object.keys(t).length!==c.tags.length?(c.tags.reset(t,o),e.forEach(t,function(e){a[e.name]=e.value})):e.forEach(t,function(e){var t,n=c.tags.get(e.name);n?(t=n.get("value"),n.set(e,o)):c.tags.add(e,o),e.value!==t&&(a[e.name]=e.value)}),e.forEach(u,function(t){var n=t.time;e.forEach(u.newValues,function(e,t){var s=c.tags.get(t);s&&n>s.get("lastChangeTime")&&(s.set({lastChangeTime:n,value:e},o),a[t]=e)})}),u=[],c.tags.trigger("reset"),e.isEmpty(a)||n.publish("controller.valuesChanged",a)}var u=[],d=[],c={};return c.auth={isEmbedded:function(){return"localhost"===window.location.hostname||window!==window.parent&&-1!==window.navigator.userAgent.indexOf("X11; Linux")},changeOrder:function(){return"idle"===c.tags.getValue("program.state")&&(this.isEmbedded()||o.isAllowedTo("MAXOS:MANAGE:CHANGE_ORDER"))},changeConfig:function(){return this.changeOrder()&&o.isAllowedTo("MAXOS:MANAGE:CHANGE_CONFIG")},printLabels:function(){return this.isEmbedded()||o.isAllowedTo("MAXOS:MANAGE:PRINT_LABELS")}},c.tags=new s([],{paginate:!1}),c.test=new i(null,{url:"/maxos/test"}),c.test.on("sync",function(){d.forEach(function(e){Date.parse(e.updatedAt)>Date.parse(c.test.get("updatedAt"))&&c.test.set(e)}),d=[]}),c.test.on("error",function(){d=[]}),c.loaded=!1,c.loading=null,c.load=function(){return c.loaded?t.Deferred().resolve().promise():c.loading?c.loading:r()},n.subscribe("socket.connected",function(){r()}),a.subscribe("controller.tagsChanged",function(e){l(e)}),a.subscribe("controller.tagValuesChanged",function(t){if(c.loading)return void u.push({time:t["@timestamp"],newValues:t});var a={};e.forEach(t,function(t,n){var o=c.tags.get(n);o&&!e.isEqual(t,o.get("value"))&&(o.set("value",t),a[n]=t)}),e.isEmpty(a)||n.publish("controller.valuesChanged",a)}),a.subscribe("maxos.test.updated",function(e){c.loading?d.push(e):c.test.set(e)}),c});